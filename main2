// #include <stdio.h>
// #include <pthread.h>
// #include <unistd.h>
// #include <time.h>

// typedef struct s_philo
// {
// 	int				id;
// 	int				meals_count;
// 	pthread_t		thread;
// 	pthread_mutex_t	fork;
// 	// pthread_mutex_t *r_fork;
// 	struct s_philo	*next;
// }	t_philo;


// void	*routine(void *content)
// {
// 	t_philo *philo = (t_philo *)content;
// 	int		i;
// 	i = 0;

// 	while (start_time == 0)
// 		;
// 	if (philo->id % 2 == 0)
// 		usleep(50);
// 	while (1)
// 	{
// 		pthread_mutex_lock(&philo->fork);
// 		printf("%d has taken his fork\n", philo->id);
// 		pthread_mutex_lock(philo->r_fork);
// 		printf("%d has taken a fork\n", philo->id);
// 		printf("%d is eating\n", philo->id);
// 		usleep(400000);
// 		philo->meals_count++;
// 		pthread_mutex_unlock(philo->r_fork);
// 		pthread_mutex_unlock(&philo->fork);
// 		printf("%d is sleeping\n", philo->id);
// 		usleep(400000);
// 		printf("%d is thinking\n", philo->id);
// 		if (philo->meals_count == 2)
// 			return NULL;
// 	}
// 	return (NULL);
// }

// int main(int ac, char **av)
// {

// 	t_philo philo1;
// 	t_philo philo2;

// 	philo1.id = 1;
// 	philo1.meals_count = 0;
// 	philo2.meals_count = 0;
// 	philo2.id = 2;
// 	pthread_mutex_init(&philo1.fork, NULL);
// 	pthread_mutex_init(&philo2.fork, NULL);
// 	philo1.r_fork = &philo2.fork;
// 	philo2.r_fork = &philo1.fork;
// 	pthread_create(&philo1.thread, NULL, routine, (&philo1));
// 	pthread_create(&philo2.thread, NULL, routine, (&philo2));
// 	start_time = 10;
// 	while (1)
// 		;
// 	return 0;
// }
